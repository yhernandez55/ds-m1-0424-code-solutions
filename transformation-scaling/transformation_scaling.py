# -*- coding: utf-8 -*-
"""transformation-scaling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yw8alNtJWZDDf1IhTKb4DnFaZyrFGPtR
"""

import pandas as pd
from sklearn.preprocessing import MinMaxScaler, StandardScaler, MaxAbsScaler, RobustScaler
from sklearn.preprocessing import Normalizer
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import boxcox, yeojohnson

df = pd.read_csv('/content/mtcars_mod.csv')
df.head()

df.info()

# 1
disp = df[['disp']]
disp

disp.value_counts()

disp.describe()

disp.hist()

scaler_minmax = MinMaxScaler()
scaler_minmax.fit(disp)
scaled_array = scaler_minmax.transform(disp)
scaled_array

disp_minmax = disp.copy()
disp_minmax.loc[:,['disp']] = scaled_array
disp_minmax
# we use min/max scaling since here we are assuming that disp has a domain of 0 to 1 after scaling

disp_minmax.describe()

disp_minmax.hist()

hp = df[['hp']]
hp

hp.describe()

hp.value_counts()

hp.hist()

(hp == 0).sum()
# since there is 0's in the data then we use Max Abs scaler

scaler_maxabs = MaxAbsScaler()
scaler_maxabs.fit(hp)
maxabs_array = scaler_maxabs.transform(hp)
hp_maxabs = hp.copy()
hp_maxabs.loc[:, 'hp'] = maxabs_array[:, 0]
hp_maxabs

hp_maxabs.describe()

hp_maxabs.hist()

drat = df[['drat']]
drat

drat.describe()

drat.value_counts()
# since there is a couple of outliers in the data then we use robust scaling

drat.hist()

scaler_robust = RobustScaler()
scaler_robust.fit(drat)
robust_array = scaler_robust.transform(drat)
drat_robust = drat.copy()
drat_robust.loc[:,['drat']] = robust_array
drat_robust

drat_robust.describe()

drat_robust.hist()

wt = df[['wt']]
wt

wt.describe()

wt.value_counts() # here we will use standard scaling

scaler_standard = StandardScaler()
scaler_standard.fit(wt)
standard_array = scaler_standard.transform(wt)
wt_standard = wt.copy()
wt_standard.loc[:, ['wt']] = standard_array
wt_standard

wt_standard.describe()

wt_standard.hist()

# 2
# for mpg we use the box cox method since there is only positive data
bc_transformed, bc_lambda = boxcox(df['mpg'])
bc_transformed, bc_lambda

plt.hist(bc_transformed)
plt.title("Box-Cox Transformed mpg")

# for qsec we use the yeo-johnson since there is negative value data
yj_transformed, yj_lambda = yeojohnson(df['qsec'])
yj_transformed, yj_lambda

plt.hist(yj_transformed)
plt.title("Yeo-Johnson Transformed qsec")

# 3
normalizer = Normalizer(norm = 'l2')
numerical_df = df.select_dtypes(include=['float', 'int'])
normalizer.fit(numerical_df)

normalied_data = normalizer.transform(numerical_df)
df_new = pd.DataFrame(normalied_data, columns=numerical_df.columns)
df_new.head()